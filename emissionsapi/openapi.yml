openapi: 3.0.0
info:
  title: Emissions API
  description: >-
      Emissions API’s mission is to provide easy access to this data without
      the need of being an expert in satellite data analysis and without having
      to process terabytes of data.
  version: "2"
  contact:
    name: The Emissions API Developers
    url: https://emissions-api.org
    email: info@emissions-api.org
externalDocs:
  description: Source code documentation
  url: https://docs.emissions-api.org
paths:
  /api/v2/{product}/geo.json:
    get:
      operationId: emissionsapi.web.get_data
      description: |
          Get all points in [GeoJSON](https://geojson.org/) format.

          The parameters `geoframe`, `country`, `polygon` and `point` are mutually exclusive.
      parameters:
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/geoframe'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/polygon'
        - $ref: '#/components/parameters/point'
        - $ref: '#/components/parameters/begin'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: The response contains all known points located within the specified rectangle contained in a GeoJSON feature collection.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Feature Collection'
        400:
          description: Parameter error
  /api/v2/{product}/average.json:
    get:
      operationId: emissionsapi.web.get_average
      description: |
          Get daily average for a specified area filtered by time.

          The parameters `geoframe`, `country`, `polygon` and `point` are mutually exclusive.
          Providing one of these parameters is mandatory.
      parameters:
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/geoframe'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/polygon'
        - $ref: '#/components/parameters/point'
        - $ref: '#/components/parameters/begin'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: Array of calculated averages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Averages'
        400:
          description: Parameter error
  /api/v2/{product}/statistics.json:
    get:
      operationId: emissionsapi.web.get_statistics
      description: |
          Get statistical values for specified time intervals.

          The parameters `geoframe`, `country`, `polygon` and `point` are mutually exclusive.
          Providing one of these parameters is mandatory.
      parameters:
        - $ref: '#/components/parameters/product'
        - $ref: '#/components/parameters/geoframe'
        - $ref: '#/components/parameters/country'
        - $ref: '#/components/parameters/polygon'
        - $ref: '#/components/parameters/point'
        - $ref: '#/components/parameters/interval'
        - $ref: '#/components/parameters/begin'
        - $ref: '#/components/parameters/end'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        200:
          description: Array of statistical data about the chosen product for specified intervals.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Statistics'
        400:
          description: Parameter error
  /api/v2/{product}/data-range.json:
    get:
      operationId: emissionsapi.web.get_data_range
      description: |
          Get the range of data currently available from the API.
      parameters:
        - $ref: '#/components/parameters/product'
      responses:
        200:
          description: Object describing the range of data available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataRange'
  /api/v2/products.json:
    get:
      operationId: emissionsapi.web.get_products
      description: |
          Get the currently available products from the API.
      responses:
        200:
          description: List of Products.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Products'

components:
  parameters:
    product:
      in: path
      name: product
      required: true
      schema:
        type: string
        enum: {{ products }}
    limit:
      in: query
      name: limit
      description: Limit number of returned items.
      schema:
        type: integer
        minimum: 0
      example: 100
    offset:
      in: query
      name: offset
      description: Specify the offset of the first item to return.
      schema:
        type: integer
        minimum: 0
      example: '0'
    interval:
      in: query
      name: interval
      description: |
        Specify the time interval length for which data is being aggregated.
        Defaults to `day`.
      schema:
        type: string
        enum: [minute, hour, day, week, month, quarter, year, decade, century]
      example: day
    geoframe:
      in: query
      name: geoframe
      schema:
        type: array
        items:
          type: number
        maxItems: 4
        minItems: 4
      description: |
        Defines an area from which measurements included in the response are taken.

        The parameter is an array in the form `lon1,lat1,lon2,lat2`,
        representing the upper left and lower right corners of a rectangle.
    point:
      in: query
      name: point
      schema:
        type: array
        items:
          type: number
        maxItems: 2
        minItems: 2
      description: |
          Defines a single `point` in the form longitude,latitude.
          The nearest point in the grid is used for calculations.
    country:
      in: query
      name: country
      schema:
        type: string
      description: |
        Specifies a bounding box of the specified country
        from which measurements included in the response are taken.

        The country is selected using an [ISO-3166, two-letter or three-letter country code
        ](https://www.iban.com/country-codes).
    polygon:
      in: query
      name: polygon
      schema:
        type: array
        items:
          type: number
        minItems: 6
      description: |
        Defines an area from which measurements included in the response are taken.

        The parameter is an array in the form `lon1,lat1,lon2,lat2,…`.
        Every value pair represents a vertex of longitude and latitude.
        The polygon is then defined as the line segments of the consecutive vertices.

        If the first and last vertices do not match, the first vertex is automatically appended to close the polygon.
      example: [30, 10, 40, 40, 20, 40, 10, 20, 30, 10]
    begin:
      in: query
      name: begin
      schema:
        type: string
      description: |
        Defines an inclusive lower bound for measurements included in the response.

        In regards of time filtering, the set of measurements considered in a response
        is defined as `{ measurement | begin ≤ measurement.time < end }`.
      example: 2019-02-10
    end:
      in: query
      name: end
      schema:
        type: string
      description: |
        Defines a non-inclusive upper bound for measurements included in the response.

        In regards of time filtering, the set of measurements considered in a response
        is defined as `{ measurement | begin ≤ measurement.time < end }`.
      example: 2019-02-11


  schemas:
    Feature Collection:
      description: Points as GeoJSON Feature Collection
      type: object
      properties:
        features:
          type: array
          items:
            type: object
            properties:
              type:  # This is the name of the key
                type: string
                example: FeatureCollection
              properties:  # This is the name of the key
                type: object
                properties:
                  value:
                    type: number
                    example: 0.0273975990712643
                  timestamp:
                    type: string
                    example: "2019-09-21T12:26:28.762000Z"
              geometry:
                type: object
                properties:
                  coordinates:
                    type: array
                    maxItems: 2
                    minItems: 2
                    items:
                      type: number
                    example: [15.096772, 44.516739]
                  type:  # This is the name of the key
                    type: string
                    example: "Point"
    Averages:
      type: array
      description: Array of daily values of the chosen product.
      items:
        type: object
        properties:
          average:
            type: number
            example: 0.0312481193586528
          start:
            type: string
            format: date-time
            example: 2019-02-10T13:05:08.812000Z
          end:
            type: string
            format: date-time
            example: 2019-02-10T13:03:40.254000Z
    Statistics:
      type: array
      description: Array of statistical data about the chosen product for specified intervals.
      items:
        type: object
        properties:
          value:
            type: object
            properties:
              count:
                type: number
                example: 100
              average:
                type: number
                example: 0.0312481193586528
              standard deviation:
                type: number
                example: 0.0123
              min:
                type: number
                example: 0.02
              max:
                type: number
                example: 0.04
          time:
            type: object
            properties:
              min:
                type: string
                format: date-time
                example: 2019-02-10T13:05:08.812000Z
              max:
                type: string
                format: date-time
                example: 2019-02-10T13:03:40.254000Z
              interval_start:
                type: string
                format: date-time
                example: 2019-02-10T00:00:00Z
    DataRange:
      type: object
      properties:
        first:
          type: string
          format: date-time
          example: 2019-02-10T13:05:08.812000Z
        last:
          type: string
          format: date-time
          example: 2019-02-10T13:03:40.254000Z
    Products:
      type: array
      description: Products of the API.
      items:
        type: object
        properties:
          name:
            type: string
            example: carbonmonoxide
            description: Name of the product
          product_variable:
            type: string
            example: carbonmonoxide_total_column
            description: Name of the variable as defined from the ESA from within the processed files.
