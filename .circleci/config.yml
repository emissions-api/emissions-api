version: 2.1
commands:
  installation:
    description: base installation
    parameters:
      virtualenv:
        type: string
        default: env
    steps:
      - run:
          name: install base dependencies
          command: |
              apt update
              apt install -y build-essential libcurl4-gnutls-dev libgnutls28-dev \
                  libpq-dev python3 python3-venv python3-dev
      - run:
          name: install emissions-api in virtualenv
          command: |
              python3 -m venv << parameters.virtualenv >>
              cp .testdata/emissionsapi.yml .
              << parameters.virtualenv >>/bin/pip install -r requirements.txt
  wait_for_database:
    description: command to wait on the database become available
    parameters:
      port:
        type: string
        default: "5432"
    steps:
      - run:
          name: Waiting for Postgres to be ready
          command: |
              for i in `seq 1 10`;
              do
                  python3 -c "import socket; import sys; socket.socket(socket.AF_INET, socket.SOCK_STREAM).connect_ex(('localhost', << parameters.port >>)) and sys.exit(1)" && echo Success && exit 0
                  echo -n .
                  sleep 1
              done
              echo Failed waiting for Postgres && exit 1
jobs:
  flake8:
    docker:
      - image: python:3.7
    steps:
      - checkout
      - run:
          name: install flake8
          command: pip install flake8
      - run:
          name: test with flake8
          command: flake8 emissionsapi
  install buster:
    docker:
      - image: debian:buster
    steps:
      - checkout
      - installation:
          virtualenv: /tmp/env
      - run:
          name: check installation
          command: |
              . /tmp/env/bin/activate
              python -c "import emissionsapi"
              python -c "import emissionsapi.web"
              python -c "import emissionsapi.download"
              python -c "import emissionsapi.db"
              python -c "import emissionsapi.preprocess"
              deactivate
              rm -r /tmp/env
      - run:
          name: install as module
          command: |
            python3 -m venv /tmp/module-env
            /tmp/module-env/bin/python setup.py install
            cd /
            . /tmp/module-env/bin/activate
            python -c "import emissionsapi"
            python -c "import emissionsapi.download"
            python -c "import emissionsapi.db"
            python -c "import emissionsapi.preprocess"
            python -c "import emissionsapi.web"
            deactivate
            rm -r /tmp/module-env
  preprocess:
    docker:
      - image: debian:buster
      - image: circleci/postgres:11-postgis
        environment:
          POSTGRES_USER: emissionsapi
          POSTGRES_PASSWORD: emissionsapi
          POSTGRES_DB: emissionsapi
    steps:
      - checkout
      - installation
      - wait_for_database
      - run:
          name: preprocess test data
          command: ./env/bin/python -m emissionsapi.preprocess
  database migration:
    docker:
      - image: debian:buster
      - image: circleci/postgres:11-postgis
        environment:
          POSTGRES_USER: emissionsapi
          POSTGRES_PASSWORD: emissionsapi
          POSTGRES_DB: emissionsapi
    steps:
      - checkout
      - run:
          name: install git and checkout master
          command: |
              apt update
              apt install -y git
              git checkout master
      - installation
      - wait_for_database
      - run:
          name: Prepare Database
          command: |
              ./env/bin/python setup.py install
              ./env/bin/python -m emissionsapi.preprocess
              ./env/bin/alembic stamp head
      - checkout
      - installation
      - run:
          name: migrate database
          command: |
              ./env/bin/python setup.py install
              ./env/bin/alembic upgrade head

workflows:
  version: 2
  simple tests:
    jobs:
      - flake8
      - install buster
  integration tests:
    jobs:
      - preprocess
      - database migration:
          filters:
            branches:
              ignore:
                - master
